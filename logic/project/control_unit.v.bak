`timescale 1ns/1ns
module ControlUnit(
	input [3:0] opcode,
	output aluSlc,
	output aluImm,
	output memLoad,
	output memSt,
	output compare,
	output regWe,
	output jump,
	output jmpRn,
	output jumpB,
	output jumpBE,
	output jumpA,
	output jumpAE,
	output jumpE
);

always @(opcode) begin
	aluSlc <= ((~opcode[0]) & (~opcode[1]) & (opcode[2]) & (~opcode[3])) | ((~opcode[0]) & (~opcode[1]) & (opcode[2]) & (opcode[3]));
	aluImm <= ((~opcode[0]) & (~opcode[1]) & (~opcode[2]) & (opcode[3]) | (~opcode[0]) & (~opcode[1]) & (opcode[2]) & (opcode[3]));
	memLoad <= ((~opcode[0]) & (opcode[1]) & (~opcode[2]) & (~opcode[3]) & (~opcode[0]) & (opcode[1]) & (~opcode[2]) & (~opcode[3]));
	memSt <= ((~opcode[0]) & (opcode[1]) & (~opcode[2]) & (opcode[3]) & (~opcode[0]) & (opcode[1]) & (~opcode[2]) & (opcode[3]));
	compare <= ((~opcode[0]) & (opcode[1]) & (opcode[2]) & (~opcode[3]));
	regWe <= ((~opcode[0]) & (~opcode[1]) & (~opcode[2]) & (~opcode[3]) | (~opcode[0]) & (~opcode[1]) & (~opcode[2]) & (opcode[3]) | (~opcode[0]) & (~opcode[1]) & (opcode[2]) & (~opcode[3]) | (~opcode[0]) & (~opcode[1]) & (opcode[2]) & (opcode[3]) | (~opcode[0]) & (opcode[1]) & (~opcode[2]) & (~opcode[3]));
	jump <= ( (~opcode[0]) & (opcode[1]) & (opcode[2]) & (opcode[3]) | (opcode[0]) & (~opcode[1]) & (~opcode[2]) & (~opcode[3]) | (opcode[0]) & (~opcode[1]) & (~opcode[2]) & (opcode[3]) | (opcode[0]) & (~opcode[1]) & (opcode[2]) & (~opcode[3]) | (opcode[0]) & (~opcode[1]) & (opcode[2]) & (opcode[3]) | (opcode[0]) & (opcode[1]));
	jmpRn <= (jump & (~opcode[0]) & (opcode[1]) & (opcode[2]) & (opcode[3]));
	jumpB <= (jump & (opcode[0]) & (~opcode[1]) & (~opcode[2]) & (~opcode[3]));
	jumpBE <= (jump & (opcode[0]) & (~opcode[1]) & (~opcode[2]) & (opcode[3]));
	jumpA <= (jump & (opcode[0]) & (~opcode[1]) & (opcode[2]) & (~opcode[3]));
	jumpAE <= (jump & (opcode[0]) & (~opcode[1]) & (opcode[2]) & (opcode[3]));
	jumpE <= jump & opcode[0] & opcode[1];
end
endmodule